#!/usr/bin/env python

from __future__ import with_statement
import sys
import os
import yaml
import argparse
import signal
import hmac
import hashlib
import struct
import base64
import time
import socket
import urllib

class Action(object):
    """
    Action base.
    """

    def __init__(self):
        """
        Loads configuration from ~/.ssh/otp
        """

        self.config = {
            'debug': False,
            'enable': False,
            'secret': '',
            'timeout': 120,
            'delay': 3,
            'drift_backward': 1,
            'drift_forward': 1,
        }
        self.config_path = os.path.join(os.environ['HOME'], '.ssh', 'otp')
        self.load()

    def load(self):
        try:
            with open(self.config_path, 'rb') as f:
                self.config.update(yaml.load(f) or {})
        except IOError:
            pass

    def save(self):
        with open(self.config_path, 'wb') as f:
            yaml.dump(self.config, f, default_flow_style=False)
        os.chmod(self.config_path, 0600)

    def check(self, code):
        drift_backward = max(0, self.config['drift_backward'])
        drift_forward = max(0, self.config['drift_forward'])

        for drift in range(-drift_backward, drift_forward + 1):
            if code == self.totp(self.config['secret'], drift=drift):
                return True
        return False

    def totp(self, key, length=6, hash=hashlib.sha1, period=30, drift=0):
        counter = int(int(time.time()) / period) + drift
        return self.hotp(key, counter, length=length, hash=hash, drift=0)

    def hotp(self, key, counter, length=6, hash=hashlib.sha1, drift=0):
        counter = struct.pack('>Q', counter + drift)
        key = base64.b32decode(key)

        digest = hmac.new(key, counter, hash).digest()

        offset = ord(digest[-1]) & 0xF
        value = struct.unpack('>L', digest[offset:offset + 4])[0] & 0x7FFFFFFFL
        code = ('%010d' % value)[-length:]
        return code

class Login(Action):

    def __init__(self):
        super(Login, self).__init__()

        # dump environ for debugging
        if self.config['debug']:
            for name, value in os.environ.iteritems():
              sys.stderr.write('%s = %s\n' % (name, value))

        # setup timeout
        signal.signal(signal.SIGALRM, self.fail)

    def shell(self, command=''):
        if command:
            os.execl('/bin/bash', '/bin/bash', '-c', command)
        else:
            shell = os.environ['SHELL']
            os.execl(shell, shell, '-l')
        assert False

    def success(self):
        self.shell(os.environ.get('SSH_ORIGINAL_COMMAND', ''))

    def fail(self, *args, **kwargs):
        os._exit(1)

    def run(self):
        # if not enabled, then simply run shell
        if not self.config['enable']:
            self.success()

        # is the code set in environment?
        code = os.environ.get('OTP', '')
        if code:
            if self.check(code):
                self.success()
            else:
                self.fail()

        # setup timeout
        signal.alarm(self.config['timeout'])

        # let user try until success or timeout
        try:
            while True:
                # get code
                sys.stderr.write('One-time password: ')
                sys.stderr.flush()

                code = raw_input().strip()
                if self.check(code):
                    break

                # delay
                time.sleep(self.config['delay'])
                sys.stderr.write('Incorrect code. Please try again.\n\n')

        except:
            self.fail()

        # disable timeout
        signal.alarm(0)

        self.success()

class Setup(Action):

    def run(self):
        sys.stdout.write('\n')

        if not self.config['secret']:
            self.generate()
           
            sys.stdout.write('New one-time password secret\n')
            sys.stdout.write('----------------------------\n')
        else:
            sys.stdout.write('Existing one-time password secret\n')
            sys.stdout.write('---------------------------------\n')

        self.display()

        if self.config['enable']:
            return
        
        self.test()

    def generate(self):
        # 320 bit of entropy
        secret = os.urandom(40)
        secret = base64.b32encode(secret)
        self.config['secret'] = secret
        self.save()

    def display(self):
        sys.stdout.write('Secret: %s\n' % self.config['secret'])

        otpauth_url = 'otpauth://totp'
        otpauth_url += urllib.quote('/ssh %s@%s' % (os.environ['USER'], socket.gethostname()))
        otpauth_url += '?' + urllib.urlencode({
            'secret': self.config['secret']
        })

        qrcode_url = 'https://chart.googleapis.com/chart?' + urllib.urlencode({
            'cht': 'qr',
            'chs': '512x512',
            'chl': otpauth_url,
        })
        sys.stdout.write('QRCode: %s\n' % qrcode_url)
        sys.stdout.write('Status: %s\n' % ('Enabled' if self.config['enable'] else 'Disabled'))
        sys.stdout.write('\n')

    def test(self):
        sys.stdout.write('To enable one-time password, please setup your authenticator.\n')

        try:
            while True:
                # get code
                sys.stderr.write('One-time password: ')
                sys.stderr.flush()

                code = raw_input().strip()
                if self.check(code):
                    break

                sys.stderr.write('Incorrect code. Please try again.\n\n')

        except:
            sys.stdout.write('\nFailed to enable one-time password.\n')
            sys.stdout.write('Please rerun setup to try again.\n')
            sys.exit(1)

        self.config['enable'] = True
        self.save()

        sys.stdout.write('Successful! One-time password is now enabled.\n')
        sys.exit(0)

class Reset(Action):
    def run(self):
        self.config['secret'] = ''
        self.config['enable'] = False
        self.save()

ACTIONS = {
    'login': Login,
    'setup': Setup,
    'reset': Reset,
}

def parse_args():
    parser = argparse.ArgumentParser(description='SSH One-time Password Authentication')
    parser.add_argument('action', choices=ACTIONS.keys())
    return parser.parse_args()

def main(args):
    action_cls = ACTIONS[args.action]
    action = action_cls()
    action.run()

if __name__ == '__main__':
    main(parse_args())
